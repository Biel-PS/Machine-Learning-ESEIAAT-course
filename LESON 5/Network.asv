classdef Network < handle

    properties (Access = private)
        networkGeometry
        
        numInput
        x
        lam
    end
    
    methods (Access = public)
        function obj = Network(cParams)
            obj.init(cParams)
        end
        function y = computeResults(obj,theta)
            nNum = obj.networkGeometry;

            s.x = obj.x;
            s.numInput = obj.numInput;

            neuron = Neuron(s);
            y = zeros(size(obj.x,1),nNum);

            th = reshape(theta,nNum,[]);

            for i = 1:nNum
                y(:,i) = (neuron.computeNeuron(th(:,i)))';
            end
            
        end

        function computeGradient



        end
    end
    methods (Access = private)
        function init (obj,cParams)
            obj.networkGeometry = cParams.networkGeometry;
            obj.numInput = cParams.numInput;
            obj.x = cParams.x;
            obj.lam = cParams.lam;
        end
        function costFun (g)
            
         m = length(obj.data.train.y(:,1));
         k = length(obj.data.train.y(:,2));

         I = ones(m,k);

         op = (I-y).*(-log((I-g))) + y.*(-log(g)) + lam.*norm(theta).^2;
        
        end
    end
end

